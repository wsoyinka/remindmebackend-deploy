AWSTemplateFormatVersion: "2010-09-09"
Description: "RemindmeBackend Deploy Stack"


# Stack Parameters

Parameters:
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: "The Target VPC Id"
  SubnetId:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Target subnet Id in AZ"
  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Permitted SSH key pair"
  InstanceCount:
    Type: "Number"
    Description: "Number of Application instances"
  DbSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "Target DB subnet group Ids"
  DbAvailabilityZone:
    Type: "AWS::EC2::AvailabilityZone::Name"
    Description: "Target AZ for RDS DB Instance"
  DbUsername:
    Type: "String"
    Description: "RDS database username"
  DbPassword:
    Type: "String"
    Description: "RDS Database password"
    NoEcho: "true"


# Stack Resources

Resources:
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: [ { "Ref": "SubnetId" } ]
      LaunchConfigurationName: { "Ref": AutoScalingLaunchConfiguration }
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: { "Ref": "InstanceCount" }
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [  { "Ref": "AWS::StackName" }, "-instance" ] ] }
          PropagateAtLaunch: "true"
  AutoScalingLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: "ami-1b90a67e"
      InstanceType: t2.micro
      KeyName: { "Ref": "KeyPair" }
      IamInstanceProfile: { "Ref": "EC2InstanceProfile" }
      SecurityGroups:
        - { "Ref": "EC2InstanceSecurityGroup" }
      UserData: {
        "Fn::Base64": { "Fn::Join": [ "", [
          "#!/bin/bash\n",
          "echo ECS_CLUSTER=",
          { "Ref": "EcsCluster" },
          " >> /etc/ecs/ecs.config\n"
        ]] }
        }
  EC2InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "remindmebackend-SG"
      VpcId: { "Ref": "VpcId" }
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "8000"
          ToPort: "8000"
          SourceSecurityGroupId: { "Ref": "ElbSecurityGroup" }
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-instance-sg" ]   ] }
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: [ {"Ref": "EC2InstanceRole"} ]
  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: {
         "Version": "2012-10-17",
         "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": ["ec2.amazonaws.com", "ecs.amazonaws.com"] },
              "Action": [ "sts:AssumeRole" ]
            }
         ]
        }
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  DbInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBSubnetGroupName: { "Ref": "DbSubnetGroup" }
      MultiAZ: "false"
      AvailabilityZone: { "Ref": "DbAvailabilityZone" }
      AllocatedStorage: 8
      StorageType: "gp2"
      DBInstanceClass: "db.t2.micro"
      DBName: "todobackend"
      Engine: "MySQL"
      EngineVersion: "5.6"
      MasterUsername: { "Ref": "DbUsername" }
      MasterUserPassword: { "Ref": "DbPassword" }
      VPCSecurityGroups:
        - { "Ref": "DbSecurityGroup" }
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-database" ]  ]  }
  DbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Remindmebackend DB security Group"
      VpcId: { "Ref": "VpcId" }
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupId: {  "Ref": "EC2InstanceSecurityGroup" }
  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "RemindmeBackend Database Subnet Group"
      SubnetIds: { "Ref": "DbSubnets" }
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-db-subnet-group" ]   ] }
  ElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      CrossZone: "false"
      SecurityGroups: [ { "Ref": "ElbSecurityGroup" } ]
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "8000"
          Protocol: "http"
      HealthCheck:
        Target: "HTTP:8000/todos"
        HealthyThreshold: "2"
        UnhealthyThreshold: "10"
        Interval: "30"
        Timeout: "5"
      Subnets: [ { "Ref": "SubnetId" } ]
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-elb" ] ]  }

  ElbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "RemindmeBackend ELB Security Group"
      VpcId: { "Ref": "VpcId" }
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: { "Fn::Join": ["", [ { "Ref": "AWS::StackName" }, "-elb-sg"  ]   ] }

  EcsCluster:
    Type: "AWS::ECS::Cluster"

  RemindmebackendTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: RemindmeBackend
          Image: wsoyinka/remindmebackend
          Memory: 450
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings.release
            - Name: MYSQL_HOST
              Value: { "Fn::GetAtt": [ "DbInstance", "Endpoint.Address" ] }
            - Name: MYSQL_USER
              Value: { "Ref": "DbUsername" }
            - Name: "MYSQL_PASSWORD"
              Value: { "Ref": "DbPassword" }
          MountPoints:
            - ContainerPath: /var/www/todobackend
              SourceVolume: webroot
          Command:
            - "uwsgi"
            - "--socket /var/www/todobackend/todobackend"
            - "--chmod-socker=666"
            - "--module todobackend.wsgi"
            - "--master"
            - "--die-on-term"
        - Name: nginx
          Image: wsoyinka/remindmebackend-nginx
          Memory: 300
          PortMappings:
            - ContainerPort: "8000"
              HostPort: "8000"
          MountPoints:
            - ContainerPath: /var/www/todobackend
              SourceVolume: webroot
      Volumes:
        - Name: webroot
          Host:
            SourcePath: /ecs/webroot

  RemindmebackendAdhocTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: RemindmeBackend
          Image: wsoyinka/remindmebackend
          Memory: 245
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings.release
            - Name: MYSQL_HOST
              Value: { "Fn::GetAtt": [ "DbInstance", "Endpoint.Address" ] }
            - Name: MYSQL_USER
              Value: { "Ref": "DbUsername" }
            - Name: "MYSQL_PASSWORD"
              Value: { "Ref": "DbPassword" }
          MountPoints:
            - ContainerPath: /var/www/todobackend
              SourceVolume: webroot
      Volumes:
        - Name: webroot
          Host:
            SourcePath: /ecs/webroot


  RemindmebackendService:
    Type: "AWS::ECS::Service"
    Properties:
      TaskDefinition: { "Ref": "RemindmebackendTaskDefinition" }
      Cluster: { "Ref": "EcsCluster" }
      LoadBalancers:
        - ContainerName: "nginx"
          ContainerPort: "8000"
          LoadBalancerName: { "Ref": "ElasticLoadBalancer" }
      Role: { "Ref": "EcsServiceRole" }
      DesiredCount: 0

  EcsServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
         {
           "Effect": "Allow",
           "Principal": {
              "Service": [ "ecs.amazonaws.com" ]
             },
           "Action": [ "sts:AssumeRole" ]
         }
        ]
      }
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole



Outputs:
  ElbDomainName:
    Description: "Public DNS name of Elastic Load Balancer"
    Value: { "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ] }
  EcsCluster:
    Description: "Amazon Resource Name of Remindmebackend ECS Cluster"
    Value: { "Ref": "EcsCluster" }
  RemindmebackendTaskDefinition:
    Description: "ARN of RemindmeBackend Task Definition"
    Value: { "Ref": "RemindmebackendTaskDefinition" }
  RemindmebackAdhocTaskDefinition:
    Description: "Amazon Resource Name (ARN) for remindmebackend adhoc/one off task definition"
    Value: { "Ref": "RemindmebackendAdhocTaskDefinition" }
  RemindmebackendService:
    Description: "ARN of remindmebackend Service"
    Value: { "Ref": "RemindmebackendService" }
